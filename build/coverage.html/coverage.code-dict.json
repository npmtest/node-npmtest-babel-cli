{"/home/travis/build/npmtest/node-npmtest-babel-cli/test.js":"/* istanbul instrument in package npmtest_babel_cli */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-babel-cli/lib.npmtest_babel_cli.js":"/* istanbul instrument in package npmtest_babel_cli */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_babel_cli = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_babel_cli = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-babel-cli/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-babel-cli && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_babel_cli */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_babel_cli\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_babel_cli.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_babel_cli.rollup.js'] =\n            local.assetsDict['/assets.npmtest_babel_cli.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_babel_cli.__dirname + '/lib.npmtest_babel_cli.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-babel-cli/node_modules/babel-cli/index.js":"throw new Error(\"Use the `babel-core` package not `babel`.\");\n","/home/travis/build/npmtest/node-npmtest-babel-cli/node_modules/babel-cli/bin/babel-doctor.js":"#!/usr/bin/env node\n\nthrow new Error(\"babel-doctor has been removed.\");\n","/home/travis/build/npmtest/node-npmtest-babel-cli/node_modules/babel-cli/bin/babel.js":"#!/usr/bin/env node\n\nrequire(\"../lib/babel\");\n","/home/travis/build/npmtest/node-npmtest-babel-cli/node_modules/babel-cli/lib/babel/index.js":"#!/usr/bin/env node\n\"use strict\";\n\nvar _keys = require(\"babel-runtime/core-js/object/keys\");\n\nvar _keys2 = _interopRequireDefault(_keys);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar fs = require(\"fs\");\nvar commander = require(\"commander\");\nvar kebabCase = require(\"lodash/kebabCase\");\nvar options = require(\"babel-core\").options;\nvar util = require(\"babel-core\").util;\nvar uniq = require(\"lodash/uniq\");\nvar glob = require(\"glob\");\n\n(0, _keys2.default)(options).forEach(function (key) {\n  var option = options[key];\n  if (option.hidden) return;\n\n  var arg = kebabCase(key);\n\n  if (option.type !== \"boolean\") {\n    arg += \" [\" + (option.type || \"string\") + \"]\";\n  }\n\n  if (option.type === \"boolean\" && option.default === true) {\n    arg = \"no-\" + arg;\n  }\n\n  arg = \"--\" + arg;\n\n  if (option.shorthand) {\n    arg = \"-\" + option.shorthand + \", \" + arg;\n  }\n\n  var desc = [];\n  if (option.deprecated) desc.push(\"[DEPRECATED] \" + option.deprecated);\n  if (option.description) desc.push(option.description);\n\n  commander.option(arg, desc.join(\" \"));\n});\n\ncommander.option(\"-x, --extensions [extensions]\", \"List of extensions to compile when a directory has been input [.es6,.js,.es,.jsx]\");\ncommander.option(\"-w, --watch\", \"Recompile files on changes\");\ncommander.option(\"--skip-initial-build\", \"Do not compile files before watching\");\ncommander.option(\"-o, --out-file [out]\", \"Compile all input files into a single file\");\ncommander.option(\"-d, --out-dir [out]\", \"Compile an input directory of modules into an output directory\");\ncommander.option(\"-D, --copy-files\", \"When compiling a directory copy over non-compilable files\");\ncommander.option(\"-q, --quiet\", \"Don't log anything\");\n\n\nvar pkg = require(\"../../package.json\");\ncommander.version(pkg.version + \" (babel-core \" + require(\"babel-core\").version + \")\");\ncommander.usage(\"[options] <files ...>\");\ncommander.parse(process.argv);\n\nif (commander.extensions) {\n  commander.extensions = util.arrayify(commander.extensions);\n}\n\nvar errors = [];\n\nvar filenames = commander.args.reduce(function (globbed, input) {\n  var files = glob.sync(input);\n  if (!files.length) files = [input];\n  return globbed.concat(files);\n}, []);\n\nfilenames = uniq(filenames);\n\nfilenames.forEach(function (filename) {\n  if (!fs.existsSync(filename)) {\n    errors.push(filename + \" doesn't exist\");\n  }\n});\n\nif (commander.outDir && !filenames.length) {\n  errors.push(\"filenames required for --out-dir\");\n}\n\nif (commander.outFile && commander.outDir) {\n  errors.push(\"cannot have --out-file and --out-dir\");\n}\n\nif (commander.watch) {\n  if (!commander.outFile && !commander.outDir) {\n    errors.push(\"--watch requires --out-file or --out-dir\");\n  }\n\n  if (!filenames.length) {\n    errors.push(\"--watch requires filenames\");\n  }\n}\n\nif (commander.skipInitialBuild && !commander.watch) {\n  errors.push(\"--skip-initial-build requires --watch\");\n}\n\nif (errors.length) {\n  console.error(errors.join(\". \"));\n  process.exit(2);\n}\n\nvar opts = exports.opts = {};\n\n(0, _keys2.default)(options).forEach(function (key) {\n  var opt = options[key];\n  if (commander[key] !== undefined && commander[key] !== opt.default) {\n    opts[key] = commander[key];\n  }\n});\n\nopts.ignore = util.arrayify(opts.ignore, util.regexify);\n\nif (opts.only) {\n  opts.only = util.arrayify(opts.only, util.regexify);\n}\n\nvar fn = void 0;\n\nif (commander.outDir) {\n  fn = require(\"./dir\");\n} else {\n  fn = require(\"./file\");\n}\n\nfn(commander, filenames, exports.opts);","/home/travis/build/npmtest/node-npmtest-babel-cli/node_modules/babel-cli/lib/babel/file.js":"\"use strict\";\n\nvar _stringify = require(\"babel-runtime/core-js/json/stringify\");\n\nvar _stringify2 = _interopRequireDefault(_stringify);\n\nvar _set = require(\"babel-runtime/core-js/set\");\n\nvar _set2 = _interopRequireDefault(_set);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar convertSourceMap = require(\"convert-source-map\");\nvar sourceMap = require(\"source-map\");\nvar slash = require(\"slash\");\nvar path = require(\"path\");\nvar util = require(\"./util\");\nvar fs = require(\"fs\");\n\nmodule.exports = function (commander, filenames, opts) {\n  if (commander.sourceMaps === \"inline\") {\n    opts.sourceMaps = true;\n  }\n\n  var results = [];\n\n  var buildResult = function buildResult() {\n    var map = new sourceMap.SourceMapGenerator({\n      file: path.basename(commander.outFile || \"\") || \"stdout\",\n      sourceRoot: opts.sourceRoot\n    });\n\n    var code = \"\";\n    var offset = 0;\n\n    results.forEach(function (result) {\n      code += result.code + \"\\n\";\n\n      if (result.map) {\n        var consumer = new sourceMap.SourceMapConsumer(result.map);\n        var sources = new _set2.default();\n\n        consumer.eachMapping(function (mapping) {\n          if (mapping.source != null) sources.add(mapping.source);\n\n          map.addMapping({\n            generated: {\n              line: mapping.generatedLine + offset,\n              column: mapping.generatedColumn\n            },\n            source: mapping.source,\n            original: mapping.source == null ? null : {\n              line: mapping.originalLine,\n              column: mapping.originalColumn\n            }\n          });\n        });\n\n        sources.forEach(function (source) {\n          var content = consumer.sourceContentFor(source, true);\n          if (content !== null) {\n            map.setSourceContent(source, content);\n          }\n        });\n\n        offset = code.split(\"\\n\").length - 1;\n      }\n    });\n\n    if (commander.sourceMaps === \"inline\" || !commander.outFile && commander.sourceMaps) {\n      code += \"\\n\" + convertSourceMap.fromObject(map).toComment();\n    }\n\n    return {\n      map: map,\n      code: code\n    };\n  };\n\n  var output = function output() {\n    var result = buildResult();\n\n    if (commander.outFile) {\n      if (commander.sourceMaps && commander.sourceMaps !== \"inline\") {\n        var mapLoc = commander.outFile + \".map\";\n        result.code = util.addSourceMappingUrl(result.code, mapLoc);\n        fs.writeFileSync(mapLoc, (0, _stringify2.default)(result.map));\n      }\n\n      fs.writeFileSync(commander.outFile, result.code);\n    } else {\n      process.stdout.write(result.code + \"\\n\");\n    }\n  };\n\n  var stdin = function stdin() {\n    var code = \"\";\n\n    process.stdin.setEncoding(\"utf8\");\n\n    process.stdin.on(\"readable\", function () {\n      var chunk = process.stdin.read();\n      if (chunk !== null) code += chunk;\n    });\n\n    process.stdin.on(\"end\", function () {\n      results.push(util.transform(commander.filename, code, {\n        sourceFileName: \"stdin\"\n      }));\n      output();\n    });\n  };\n\n  var walk = function walk() {\n    var _filenames = [];\n    results = [];\n\n    filenames.forEach(function (filename) {\n      if (!fs.existsSync(filename)) return;\n\n      var stat = fs.statSync(filename);\n      if (stat.isDirectory()) {\n        var dirname = filename;\n\n        util.readdirFilter(filename).forEach(function (filename) {\n          _filenames.push(path.join(dirname, filename));\n        });\n      } else {\n        _filenames.push(filename);\n      }\n    });\n\n    _filenames.forEach(function (filename) {\n      if (util.shouldIgnore(filename)) return;\n\n      var sourceFilename = filename;\n      if (commander.outFile) {\n        sourceFilename = path.relative(path.dirname(commander.outFile), sourceFilename);\n      }\n      sourceFilename = slash(sourceFilename);\n\n      var data = util.compile(filename, {\n        sourceFileName: sourceFilename\n      });\n\n      if (data.ignored) return;\n      results.push(data);\n    });\n\n    output();\n  };\n\n  var files = function files() {\n\n    if (!commander.skipInitialBuild) {\n      walk();\n    }\n\n    if (commander.watch) {\n      var chokidar = util.requireChokidar();\n      chokidar.watch(filenames, {\n        persistent: true,\n        ignoreInitial: true,\n        awaitWriteFinish: {\n          stabilityThreshold: 50,\n          pollInterval: 10\n        }\n      }).on(\"all\", function (type, filename) {\n        if (util.shouldIgnore(filename) || !util.canCompile(filename, commander.extensions)) return;\n\n        if (type === \"add\" || type === \"change\") {\n          util.log(type + \" \" + filename);\n          try {\n            walk();\n          } catch (err) {\n            console.error(err.stack);\n          }\n        }\n      });\n    }\n  };\n\n  if (filenames.length) {\n    files();\n  } else {\n    stdin();\n  }\n};","/home/travis/build/npmtest/node-npmtest-babel-cli/node_modules/babel-cli/lib/babel/util.js":"\"use strict\";\n\nexports.__esModule = true;\nexports.chmod = chmod;\nexports.readdirFilter = readdirFilter;\nexports.shouldIgnore = shouldIgnore;\nexports.addSourceMappingUrl = addSourceMappingUrl;\nexports.log = log;\nexports.transform = transform;\nexports.compile = compile;\nexports.requireChokidar = requireChokidar;\nvar commander = require(\"commander\");\nvar defaults = require(\"lodash/defaults\");\nvar readdir = require(\"fs-readdir-recursive\");\nvar index = require(\"./index\");\nvar babel = require(\"babel-core\");\nvar util = require(\"babel-core\").util;\nvar path = require(\"path\");\nvar fs = require(\"fs\");\n\nfunction chmod(src, dest) {\n  fs.chmodSync(dest, fs.statSync(src).mode);\n}\n\nfunction readdirFilter(filename) {\n  return readdir(filename).filter(function (filename) {\n    return util.canCompile(filename);\n  });\n}\n\nexports.readdir = readdir;\nvar canCompile = exports.canCompile = util.canCompile;\n\nfunction shouldIgnore(loc) {\n  return util.shouldIgnore(loc, index.opts.ignore, index.opts.only);\n}\n\nfunction addSourceMappingUrl(code, loc) {\n  return code + \"\\n//# sourceMappingURL=\" + path.basename(loc);\n}\n\nfunction log(msg) {\n  if (!commander.quiet) console.log(msg);\n}\n\nfunction transform(filename, code, opts) {\n  opts = defaults(opts || {}, index.opts);\n  opts.filename = filename;\n\n  var result = babel.transform(code, opts);\n  result.filename = filename;\n  result.actual = code;\n  return result;\n}\n\nfunction compile(filename, opts) {\n  try {\n    var code = fs.readFileSync(filename, \"utf8\");\n    return transform(filename, code, opts);\n  } catch (err) {\n    if (commander.watch) {\n      console.error(toErrorStack(err));\n      return { ignored: true };\n    } else {\n      throw err;\n    }\n  }\n}\n\nfunction toErrorStack(err) {\n  if (err._babel && err instanceof SyntaxError) {\n    return err.name + \": \" + err.message + \"\\n\" + err.codeFrame;\n  } else {\n    return err.stack;\n  }\n}\n\nprocess.on(\"uncaughtException\", function (err) {\n  console.error(toErrorStack(err));\n  process.exit(1);\n});\n\nfunction requireChokidar() {\n  try {\n    return require(\"chokidar\");\n  } catch (err) {\n    console.error(\"The optional dependency chokidar failed to install and is required for \" + \"--watch. Chokidar is likely not supported on your platform.\");\n    throw err;\n  }\n}","/home/travis/build/npmtest/node-npmtest-babel-cli/node_modules/babel-cli/bin/babel-node.js":"#!/usr/bin/env node\n\nrequire(\"../lib/babel-node\");\n","/home/travis/build/npmtest/node-npmtest-babel-cli/node_modules/babel-cli/lib/babel-node.js":"\"use strict\";\n\nvar getV8Flags = require(\"v8flags\");\nvar path = require(\"path\");\n\nvar args = [path.join(__dirname, \"_babel-node\")];\n\nvar babelArgs = process.argv.slice(2);\nvar userArgs = void 0;\n\nvar argSeparator = babelArgs.indexOf(\"--\");\nif (argSeparator > -1) {\n  userArgs = babelArgs.slice(argSeparator);\n  babelArgs = babelArgs.slice(0, argSeparator);\n}\n\nfunction getNormalizedV8Flag(arg) {\n  var matches = arg.match(/--(.+)/);\n\n  if (matches) {\n    return \"--\" + matches[1].replace(/-/g, \"_\");\n  }\n\n  return arg;\n}\n\ngetV8Flags(function (err, v8Flags) {\n  babelArgs.forEach(function (arg) {\n    var flag = arg.split(\"=\")[0];\n\n    switch (flag) {\n      case \"-d\":\n        args.unshift(\"--debug\");\n        break;\n\n      case \"debug\":\n      case \"--debug\":\n      case \"--debug-brk\":\n      case \"--inspect\":\n        args.unshift(arg);\n        break;\n\n      case \"-gc\":\n        args.unshift(\"--expose-gc\");\n        break;\n\n      case \"--nolazy\":\n        args.unshift(flag);\n        break;\n\n      default:\n        if (v8Flags.indexOf(getNormalizedV8Flag(flag)) >= 0 || arg.indexOf(\"--trace\") === 0) {\n          args.unshift(arg);\n        } else {\n          args.push(arg);\n        }\n        break;\n    }\n  });\n\n  if (argSeparator > -1) {\n    args = args.concat(userArgs);\n  }\n\n  try {\n    var kexec = require(\"kexec\");\n    kexec(process.argv[0], args);\n  } catch (err) {\n    if (err.code !== \"MODULE_NOT_FOUND\") throw err;\n\n    var child_process = require(\"child_process\");\n    var proc = child_process.spawn(process.argv[0], args, { stdio: \"inherit\" });\n    proc.on(\"exit\", function (code, signal) {\n      process.on(\"exit\", function () {\n        if (signal) {\n          process.kill(process.pid, signal);\n        } else {\n          process.exit(code);\n        }\n      });\n    });\n  }\n});","/home/travis/build/npmtest/node-npmtest-babel-cli/node_modules/babel-cli/lib/_babel-node.js":"\"use strict\";\n\nvar _pathIsAbsolute = require(\"path-is-absolute\");\n\nvar _pathIsAbsolute2 = _interopRequireDefault(_pathIsAbsolute);\n\nvar _commander = require(\"commander\");\n\nvar _commander2 = _interopRequireDefault(_commander);\n\nvar _module2 = require(\"module\");\n\nvar _module3 = _interopRequireDefault(_module2);\n\nvar _util = require(\"util\");\n\nvar _path = require(\"path\");\n\nvar _path2 = _interopRequireDefault(_path);\n\nvar _repl = require(\"repl\");\n\nvar _repl2 = _interopRequireDefault(_repl);\n\nvar _babelCore = require(\"babel-core\");\n\nvar babel = _interopRequireWildcard(_babelCore);\n\nvar _vm = require(\"vm\");\n\nvar _vm2 = _interopRequireDefault(_vm);\n\nrequire(\"babel-polyfill\");\n\nvar _babelRegister = require(\"babel-register\");\n\nvar _babelRegister2 = _interopRequireDefault(_babelRegister);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar program = new _commander2.default.Command(\"babel-node\");\n\nprogram.option(\"-e, --eval [script]\", \"Evaluate script\");\nprogram.option(\"-p, --print [code]\", \"Evaluate script and print result\");\nprogram.option(\"-o, --only [globs]\", \"\");\nprogram.option(\"-i, --ignore [globs]\", \"\");\nprogram.option(\"-x, --extensions [extensions]\", \"List of extensions to hook into [.es6,.js,.es,.jsx]\");\nprogram.option(\"-w, --plugins [string]\", \"\", _babelCore.util.list);\nprogram.option(\"-b, --presets [string]\", \"\", _babelCore.util.list);\n\nvar pkg = require(\"../package.json\");\nprogram.version(pkg.version);\nprogram.usage(\"[options] [ -e script | script.js ] [arguments]\");\nprogram.parse(process.argv);\n\n(0, _babelRegister2.default)({\n  extensions: program.extensions,\n  ignore: program.ignore,\n  only: program.only,\n  plugins: program.plugins,\n  presets: program.presets\n});\n\nvar replPlugin = function replPlugin(_ref) {\n  var t = _ref.types;\n  return {\n    visitor: {\n      ModuleDeclaration: function ModuleDeclaration(path) {\n        throw path.buildCodeFrameError(\"Modules aren't supported in the REPL\");\n      },\n      VariableDeclaration: function VariableDeclaration(path) {\n        if (path.node.kind !== \"var\") {\n          throw path.buildCodeFrameError(\"Only `var` variables are supported in the REPL\");\n        }\n      },\n      Program: function Program(path) {\n        if (path.get(\"body\").some(function (child) {\n          return child.isExpressionStatement();\n        })) return;\n\n        path.pushContainer(\"body\", t.expressionStatement(t.identifier(\"undefined\")));\n      }\n    }\n  };\n};\n\nvar _eval = function _eval(code, filename) {\n  code = code.trim();\n  if (!code) return undefined;\n\n  code = babel.transform(code, {\n    filename: filename,\n    presets: program.presets,\n    plugins: (program.plugins || []).concat([replPlugin])\n  }).code;\n\n  return _vm2.default.runInThisContext(code, {\n    filename: filename\n  });\n};\n\nif (program.eval || program.print) {\n  var code = program.eval;\n  if (!code || code === true) code = program.print;\n\n  global.__filename = \"[eval]\";\n  global.__dirname = process.cwd();\n\n  var _module = new _module3.default(global.__filename);\n  _module.filename = global.__filename;\n  _module.paths = _module3.default._nodeModulePaths(global.__dirname);\n\n  global.exports = _module.exports;\n  global.module = _module;\n  global.require = _module.require.bind(_module);\n\n  var result = _eval(code, global.__filename);\n  if (program.print) {\n    var output = typeof result === \"string\" ? result : (0, _util.inspect)(result);\n    process.stdout.write(output + \"\\n\");\n  }\n} else {\n  if (program.args.length) {\n    var args = process.argv.slice(2);\n\n    var i = 0;\n    var ignoreNext = false;\n    args.some(function (arg, i2) {\n      if (ignoreNext) {\n        ignoreNext = false;\n        return;\n      }\n\n      if (arg[0] === \"-\") {\n        var parsedArg = program[arg.slice(2)];\n        if (parsedArg && parsedArg !== true) {\n          ignoreNext = true;\n        }\n      } else {\n        i = i2;\n        return true;\n      }\n    });\n    args = args.slice(i);\n\n    var filename = args[0];\n    if (!(0, _pathIsAbsolute2.default)(filename)) args[0] = _path2.default.join(process.cwd(), filename);\n\n    process.argv = [\"node\"].concat(args);\n    process.execArgv.unshift(__filename);\n\n    _module3.default.runMain();\n  } else {\n    replStart();\n  }\n}\n\nfunction replStart() {\n  _repl2.default.start({\n    prompt: \"> \",\n    input: process.stdin,\n    output: process.stdout,\n    eval: replEval,\n    useGlobal: true\n  });\n}\n\nfunction replEval(code, context, filename, callback) {\n  var err = void 0;\n  var result = void 0;\n\n  try {\n    if (code[0] === \"(\" && code[code.length - 1] === \")\") {\n      code = code.slice(1, -1);\n    }\n\n    result = _eval(code, filename);\n  } catch (e) {\n    err = e;\n  }\n\n  callback(err, result);\n}","/home/travis/build/npmtest/node-npmtest-babel-cli/node_modules/babel-cli/lib/babel/dir.js":"\"use strict\";\n\nvar _stringify = require(\"babel-runtime/core-js/json/stringify\");\n\nvar _stringify2 = _interopRequireDefault(_stringify);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar outputFileSync = require(\"output-file-sync\");\nvar slash = require(\"slash\");\nvar path = require(\"path\");\nvar util = require(\"./util\");\nvar fs = require(\"fs\");\n\nmodule.exports = function (commander, filenames) {\n  function write(src, relative) {\n    relative = relative.replace(/\\.(\\w*?)$/, \"\") + \".js\";\n\n    var dest = path.join(commander.outDir, relative);\n\n    var data = util.compile(src, {\n      sourceFileName: slash(path.relative(dest + \"/..\", src)),\n      sourceMapTarget: path.basename(relative)\n    });\n    if (!commander.copyFiles && data.ignored) return;\n\n    if (data.map && commander.sourceMaps && commander.sourceMaps !== \"inline\") {\n      var mapLoc = dest + \".map\";\n      data.code = util.addSourceMappingUrl(data.code, mapLoc);\n      outputFileSync(mapLoc, (0, _stringify2.default)(data.map));\n    }\n\n    outputFileSync(dest, data.code);\n    util.chmod(src, dest);\n\n    util.log(src + \" -> \" + dest);\n  }\n\n  function handleFile(src, filename) {\n    if (util.shouldIgnore(src)) return;\n\n    if (util.canCompile(filename, commander.extensions)) {\n      write(src, filename);\n    } else if (commander.copyFiles) {\n      var dest = path.join(commander.outDir, filename);\n      outputFileSync(dest, fs.readFileSync(src));\n      util.chmod(src, dest);\n    }\n  }\n\n  function handle(filename) {\n    if (!fs.existsSync(filename)) return;\n\n    var stat = fs.statSync(filename);\n\n    if (stat.isDirectory(filename)) {\n      var dirname = filename;\n\n      util.readdir(dirname).forEach(function (filename) {\n        var src = path.join(dirname, filename);\n        handleFile(src, filename);\n      });\n    } else {\n      write(filename, filename);\n    }\n  }\n\n  if (!commander.skipInitialBuild) {\n    filenames.forEach(handle);\n  }\n\n  if (commander.watch) {\n    var chokidar = util.requireChokidar();\n\n    filenames.forEach(function (dirname) {\n      var watcher = chokidar.watch(dirname, {\n        persistent: true,\n        ignoreInitial: true,\n        awaitWriteFinish: {\n          stabilityThreshold: 50,\n          pollInterval: 10\n        }\n      });\n\n      [\"add\", \"change\"].forEach(function (type) {\n        watcher.on(type, function (filename) {\n          var relative = path.relative(dirname, filename) || filename;\n          try {\n            handleFile(filename, relative);\n          } catch (err) {\n            console.error(err.stack);\n          }\n        });\n      });\n    });\n  }\n};"}